// Prisma schema for Social Wallet API

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  email         String   @unique
  passwordHash  String   @map("password_hash")
  username      String?  @unique
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  emailVerified Boolean  @default(false) @map("email_verified")
  isActive      Boolean  @default(true) @map("is_active")

  profile              UserProfile?
  mediaAssets          MediaAsset[]
  verifications        UserVerification[]
  sharingPermissions   SharingPermission[]
  authorizationCodes   AuthorizationCode[]
  accessTokens         AccessToken[]
  wallet               Wallet?
  stripePayments       StripePayment[]

  @@map("users")
}

model UserProfile {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @unique @map("user_id") @db.Uuid
  displayName      String?   @map("display_name")
  bio              String?
  profilePictureUrl String?  @map("profile_picture_url")
  coverImageUrl    String?   @map("cover_image_url")
  location         String?
  website          String?
  birthDate        DateTime? @map("birth_date") @db.Date
  phone            String?
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model MediaAsset {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  fileUrl     String   @map("file_url")
  fileType    String   @map("file_type")
  fileSize    BigInt?  @map("file_size")
  mimeType    String?  @map("mime_type")
  description String?
  tags        String[]
  createdAt   DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("media_assets")
}

model UserVerification {
  id               String    @id @default(uuid()) @db.Uuid
  userId           String    @map("user_id") @db.Uuid
  verificationType String    @map("verification_type")
  verified         Boolean   @default(false)
  verificationData Json?     @map("verification_data")
  verifiedAt       DateTime? @map("verified_at")
  expiresAt        DateTime? @map("expires_at")
  createdAt        DateTime  @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, verificationType], map: "userId_verificationType")
  @@map("user_verifications")
}

model ApiClient {
  id               String   @id @default(uuid()) @db.Uuid
  clientName       String   @map("client_name")
  clientKey        String   @unique @map("client_key")
  clientSecret     String   @map("client_secret")
  callbackUrls     String[] @map("callback_urls")
  subscriptionTier String   @map("subscription_tier")
  monthlyFee       Decimal  @map("monthly_fee") @db.Decimal(10, 2)
  isActive         Boolean  @default(true) @map("is_active")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")

  sharingPermissions SharingPermission[]
  authorizationCodes AuthorizationCode[]
  accessTokens       AccessToken[]
  subscriptions      Subscription[]
  apiUsage           ApiUsage[]
  giftTypes          GiftType[]
  giftTransactions   GiftTransaction[]
  marketplace        GiftMarketplace?

  @@map("api_clients")
}

model SharingPermission {
  id            String    @id @default(uuid()) @db.Uuid
  userId        String    @map("user_id") @db.Uuid
  clientId      String    @map("client_id") @db.Uuid
  allowedFields String[]  @map("allowed_fields")
  expiresAt     DateTime? @map("expires_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  client ApiClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([userId, clientId])
  @@map("sharing_permissions")
}

model AuthorizationCode {
  id          String   @id @default(uuid()) @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  clientId    String   @map("client_id") @db.Uuid
  code        String   @unique
  redirectUri String   @map("redirect_uri")
  scopes      String[]
  expiresAt   DateTime @map("expires_at")
  used        Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")

  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  client ApiClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("authorization_codes")
}

model AccessToken {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  clientId     String   @map("client_id") @db.Uuid
  token        String   @unique
  refreshToken String?  @unique @map("refresh_token")
  scopes       String[]
  expiresAt    DateTime @map("expires_at")
  createdAt    DateTime @default(now()) @map("created_at")

  user   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  client ApiClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("access_tokens")
}

model Subscription {
  id                  String    @id @default(uuid()) @db.Uuid
  clientId            String    @map("client_id") @db.Uuid
  subscriptionStatus  String    @map("subscription_status")
  currentPeriodStart  DateTime  @map("current_period_start")
  currentPeriodEnd    DateTime  @map("current_period_end")
  monthlyFee          Decimal   @map("monthly_fee") @db.Decimal(10, 2)
  lastPaymentDate     DateTime? @map("last_payment_date")
  nextBillingDate     DateTime? @map("next_billing_date")
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")

  client ApiClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
}

model ApiUsage {
  id           String   @id @default(uuid()) @db.Uuid
  clientId     String   @map("client_id") @db.Uuid
  endpoint     String
  requestCount Int      @default(1) @map("request_count")
  date         DateTime @db.Date
  createdAt    DateTime @default(now()) @map("created_at")

  client ApiClient @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId, endpoint, date], map: "clientId_endpoint_date")
  @@map("api_usage")
}

// Digital Wallet System
model Wallet {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @unique @map("user_id") @db.Uuid
  balanceCoins  Int      @default(0) @map("balance_coins")
  totalSpent    Int      @default(0) @map("total_spent")
  totalEarned   Int      @default(0) @map("total_earned")
  isLocked      Boolean  @default(false) @map("is_locked")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions      WalletTransaction[]
  sentGifts         GiftTransaction[]  @relation("GiftSender")
  receivedGifts     GiftTransaction[]  @relation("GiftReceiver")

  @@map("wallets")
}

model WalletTransaction {
  id                String            @id @default(uuid()) @db.Uuid
  walletId          String            @map("wallet_id") @db.Uuid
  type              TransactionType   @map("type")
  amount            Int               // Amount in coins (can be negative for spending)
  balanceAfter      Int               @map("balance_after")
  description       String?
  referenceType     String?           @map("reference_type") // 'stripe_payment', 'gift_sent', 'gift_received', etc.
  referenceId       String?           @map("reference_id")
  metadata          Json?
  createdAt         DateTime          @default(now()) @map("created_at")

  wallet Wallet @relation(fields: [walletId], references: [id], onDelete: Cascade)

  @@map("wallet_transactions")
}

enum TransactionType {
  DEPOSIT    // User added money via Stripe
  GIFT_SENT  // User sent a gift
  GIFT_RECEIVED // User received a gift
  WITHDRAWAL // User cashed out
  REFUND     // Refund for a transaction
  BONUS      // Free coins from promotions
  PENALTY    // Coins removed for violations
}

model GiftType {
  id            String      @id @default(uuid()) @db.Uuid
  name          String
  description   String?
  platformId    String?     @map("platform_id") @db.Uuid // null = universal gift
  priceCoins    Int         @map("price_coins")
  iconUrl       String?     @map("icon_url")
  animationUrl  String?     @map("animation_url")
  rarity        GiftRarity  @default(COMMON)
  category      String      @default("general")
  isActive      Boolean     @default(true) @map("is_active")
  isLimited     Boolean     @default(false) @map("is_limited")
  maxQuantity   Int?        @map("max_quantity") // For limited edition gifts
  soldQuantity  Int         @default(0) @map("sold_quantity")
  metadata      Json?       // Additional gift properties
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")

  platform ApiClient?       @relation(fields: [platformId], references: [id], onDelete: SetNull)
  transactions GiftTransaction[]

  @@map("gift_types")
}

enum GiftRarity {
  COMMON
  RARE
  EPIC
  LEGENDARY
}

model GiftTransaction {
  id              String   @id @default(uuid()) @db.Uuid
  fromUserId      String   @map("from_user_id") @db.Uuid
  toUserId        String   @map("to_user_id") @db.Uuid
  giftTypeId      String   @map("gift_type_id") @db.Uuid
  platformId      String   @map("platform_id") @db.Uuid
  quantity        Int      @default(1)
  totalCoins      Int      @map("total_coins")
  message         String?
  transactionId   String   @unique @map("transaction_id")
  status          GiftStatus @default(COMPLETED)
  platformFee     Int      @default(0) @map("platform_fee") // Platform's revenue share
  socialWalletFee Int      @default(0) @map("social_wallet_fee") // Our transaction fee
  metadata        Json?
  createdAt       DateTime @default(now()) @map("created_at")

  sender     Wallet    @relation("GiftSender", fields: [fromUserId], references: [userId], onDelete: Cascade)
  receiver   Wallet    @relation("GiftReceiver", fields: [toUserId], references: [userId], onDelete: Cascade)
  giftType   GiftType  @relation(fields: [giftTypeId], references: [id])
  platform   ApiClient @relation(fields: [platformId], references: [id])

  @@map("gift_transactions")
}

enum GiftStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model StripePayment {
  id                String        @id @default(uuid()) @db.Uuid
  userId            String        @map("user_id") @db.Uuid
  stripePaymentId   String        @unique @map("stripe_payment_id")
  stripeCustomerId  String?       @map("stripe_customer_id")
  amount            Int           // Amount in cents (USD)
  coins             Int           // Coins received
  status            PaymentStatus @default(PENDING)
  currency          String        @default("usd")
  description       String?
  metadata          Json?
  createdAt         DateTime      @default(now()) @map("created_at")
  completedAt       DateTime?     @map("completed_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("stripe_payments")
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELED
  REFUNDED
}

model GiftMarketplace {
  id            String   @id @default(uuid()) @db.Uuid
  platformId    String   @map("platform_id") @db.Uuid
  revenueShare  Float    @map("revenue_share") @db.Real // Platform's share (0.0 to 1.0)
  isEnabled     Boolean  @default(true) @map("is_enabled")
  customBranding Json?   @map("custom_branding")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  platform ApiClient @relation(fields: [platformId], references: [id], onDelete: Cascade)

  @@unique([platformId])
  @@map("gift_marketplace")
}